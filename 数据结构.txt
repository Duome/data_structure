线性数据结构——
    特点——
        只存在先后的次序关系
        线性结构总有两段，不通线性结构的关键区别在于数据项增减的方式
        有的结构只允许数据项从一段添加，有的数据则允许数据项从两段移除
    分类——
        栈        stack
        队列      queue
        双端队列   deque
        链表      linkedlist
    使用列表模拟线性数据结构注意——
        队列的首段是列表的尾端，队列的尾端是列表的首段

栈——
    特点——
        一种有次序的数据项集合，数据项的加入和移除都发生在栈项
        后进先出
        反转次序
    栈模拟（列表）——
        需要支持的功能——
            创建——添加——删除——查询数据——判断——查询大小
            创建栈（不包含数据项）                       Stack()
            加入栈项（无返回值）                         push(item)
            将数据项移除（返回栈顶的数据，并且栈被修改）      pop()
            窥视栈顶数据项（但不移除该数据项，并且栈不被修改） peek()
            判断栈是否为空（返回栈是否为空的bool值）        isEmpty()
            查询栈中多少个数据项（返回栈中有多少数据项）      size()
        实例——
            class Stack():
                def __init__(self):
                    self.stack_list = []

                # 添加数据
                def push(self, item):
                    self.stack_list.append(item)

                # 移除数据
                def pop(self):
                    if not self.isEmpty():
                        return self.stack_list.pop()

                # 查询数据
                def peek(self):
                    if not self.isEmpty():
                        return self.stack_list[-1]

                # 判断是否为空栈
                def isEmpty(self):
                    return self.stack_list == []

                # 查询数据大小
                def size(self):
                    return len(self.stack_list)

队列——
    特点——
        有次序的数据集合添加发生在尾端，移除发生在首端
        先进先出
        只有一个入口和出口，不允许数据项从中间插入或移除
    模拟队列（列表）——
        创建——添加——删除——判断存在——查询大小
        创建空队列（返回队列对象）               Queue()
        添加数据项（无返回值）                  enqueue(item)
        移除数据项（返回队首数据项，队列被修改）    dequeue()
        判断是否为空队列（返回布尔值）            isEmpty()
        数据大小（返回数据项个数）               size()
    代码实例——
        class Queue():
            def __init__(self):
                # 创建队列
                self.queue_list = []

            def enqueue(self, item):
                # 添加数据项
                self.queue_list.insert(0, item)

            def dequeue(self):
                # 移除数据项
                if not self.isEmpty():
                    return self.queue_list.pop()

            def isEmpty(self):
                # 判断是否为空队列
                return self.queue_list == []

            def size(self):
                # 查询队列大小
                return len(self.queue_list)

双端队列——
    模拟双端队列（列表）——
        创建——添加首——添加尾——移除首——移除尾——判断为空——查询大小
        创建双端队列                      Deque()
        添加队首数据项（无返回值）           addFront(item)
        添加队尾数据项（无返回值）           addRear(item)
        移除队首数据项（返回移除的数据项）     removeFront()
        移除队尾数据项（返回移除的数据项）     removeRear()
        判断双端队列是否为空（返回布尔值）     isEmpty()
        查询双端队列大小（返回数据项个数）     size()
    代码实例——
        class Deque(object):
            def __init__(self):
                # 创建双端队列
                self.deque_list = []

            def addFront(self, item):
                # 添加队首数据项
                self.deque_list.append(item)

            def addRear(self, item):
                # 添加队尾数据项
                self.deque_list.insert(0, item)

            def removeFront(self):
                # 移除队首数据项
                if not self.isEmpty():
                    return self.deque_list.pop()

            def removeRear(self):
                # 移除队尾数据项
                if not self.isEmpty():
                    return self.deque_list.pop(0)

            def isEmpty(self):
                # 判断是否为空双端队列
                return self.deque_list == []

            def size(self):
                # 查询队列大小
                return len(self.deque_list)

链表——
    定义——
        实现了数据之间保持逻辑顺序（通过引用实现），但是存储空间不必按照顺序的方法
    基本要素——
        节点      每个节点有两个域
            域值      左边部分，存放用户数据
            指针域    右边部分，存储下一个元素的指针
        head节点  没有值域，只有指针域切永远指向第一个节点
        tail节点  有值域，有指针域，但永远指向None
    优点——
        插入删除速度快，不用对整个链表进行调整
        能够动态的进行存储分配
    模拟链表（类）——
        创建——添加——移除某个项——判断存在——判断为空——添加末尾——查询索引——插入数据——移除末尾——移除某位
        创建空列表（返回对象）                        List()
        添加数据项（返回空，假设item原不存在与表中）      add(item)
        移除某个数据项（返回移除数据项，列表被修改）       remove(item)
        判断是否存在数据项（返回布尔类型值）              search(item)
        判断是否为空（返回布尔值）                      isEmpty()
        查询数据大小（返回数据项大小）                   size()
        添加末尾数据项（返回空，假设item原先不存在与列表）  append(item)
        查询数据索引（返回数据项在表中的位置）            index(item)
        插入数据项（返回空）                          insert(pos, item)
        移除末尾数据项（返回移除数据项，列表被修改）       pop()
        移除某位数据项（返回移除数据项，列表被修改）       pop(pos)






































